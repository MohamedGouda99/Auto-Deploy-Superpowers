version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

# commands:

 


  


# destroy-environment:
#   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#   parameters:
#     Workflow_ID:
#       type: string
#       default: ${CIRCLE_WORKFLOW_ID:0:7}
#   steps:
#     - run:
#         name: Destroy environments
#         when: on_fail
#         command: |
#           # Empty frontend bucket
#           aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

#           # Delete frontend stack
#           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

#           # Delete backend stack
#           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      # - notify_on_failure

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd frontend
            npm install 
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      # - notify_on_failure

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end test
          command:  |
            cd frontend
            npm install
            npm run test
      # - notify_on_failure
                
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end test
          command:  |
            cd backend
            npm install
            npm run test
      
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      # - notify_on_failure
            
#   scan-frontend:
#     executor: node
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-scan]
#       - run: 
#           name: Front-end scan
#           command:  |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical
#       # - notify_on_failure
# # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
          
      

#   scan-backend:
#     executor: node
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-scan]
#       - run:
#           name: Back-end scan
#           command:  |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force
#             npm audit --audit-level=critical
#       # - notify_on_failure



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
            
  

