version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  install_awscli:
    description: Install AWS CLI V2
    steps:
      - run:
          name: Install AWS CLI V2
          command:  |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
  
  install_ansible:
    description:  Install Ansible v2
    steps:
      - run:
          name: Install Ansible v2
          command:  |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible



 


  


# destroy-environment:
#   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#   parameters:
#     Workflow_ID:
#       type: string
#       default: ${CIRCLE_WORKFLOW_ID:0:7}
#   steps:
#     - run:
#         name: Destroy environments
#         when: on_fail
#         command: |
#           # Empty frontend bucket
#           aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

#           # Delete frontend stack
#           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

#           # Delete backend stack
#           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd frontend
            npm install 
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end test
          command:  |
            cd frontend
            npm install
            npm run test
    
                
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end test
          command:  |
            cd backend
            npm install
            npm run test
      
      
                  
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run: 
          name: Front-end scan
          command:  |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      
      

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command:  |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      


 
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
            cat inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
           

  configure-infrastructure:
    docker:
      - image:  cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["57:25:dd:b5:e6:da:e5:9e:07:80:f6:f7:9e:71:3b:da"]
      - attach_workspace:
          at: ~/
      - run:
          name: configure server
          command:  |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml




workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [circleci-project-setup]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
            
  

